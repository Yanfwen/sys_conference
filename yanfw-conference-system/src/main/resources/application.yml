server:
  port: 8080
#  servlet:
#    context-path: /yanfw


spring:
  servlet:
    multipart:
      # 单个文件的最大值
      max-file-size: 50MB
      # 上传文件总的最大值
      max-request-size: 100MB
#  resources:
#    static-locations: classpath:/static/


  # 声明缓存类型
  cache:
    type: redis
    # redis缓存过期时间
    redis:
      time-to-live: 600000
  # 声明数据源类型
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    ############################连接池的设置###########################
    dynamic:
      datasource:
        master:
          url: jdbc:mysql://120.79.190.44:3306/sys_metting?characterEncoding=UTF-8&useUnicode=true&useSSL=false&tinyInt1isBit=false
          username: root
          password: 123456
          driver-class-name: com.mysql.cj.jdbc.Driver
        # 多数据源配置
        # multi-datasource1:
        #url: jdbc:mysql://localhost:3306/jeecg-boot2?useUnicode=true&characterEncoding=utf8&autoReconnect=true&zeroDateTimeBehavior=convertToNull&transformedBitIsBoolean=true
        #username: root
        #password: root
        #driver-class-name: com.mysql.cj.jdbc.Driver
      druid:
        # 初始化时建立物理连接的个数
        initial-size: 5
        # 最小连接池数量
        min-idle: 5
        # 最大连接池数量 maxIdle已经不再使用
        max-active: 20
        # 配置获取连接等待超时的时间
        max-wait: 60000
        # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
        time-between-eviction-runs-millis: 60000
        # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接
        min-evictable-idle-time-millis: 300000
        #用来检测连接是否有效的sql 必须是一个查询语句
        validation-query: SELECT 1 FROM DUAL
        # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
        filters: stat,wall,slf4j
        # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
        connection-properties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
        # 是否缓存preparedStatement,mysql5.5+建议开启
        pool-prepared-statements: true
        # 当值大于0时poolPreparedStatements会自动修改为true
        max-pool-prepared-statement-per-connection-size: 20
        # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
        test-while-idle: true
        # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-borrow: false
        #归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
        test-on-return: false
        # 合并多个DruidDataSource的监控数据
        use-global-data-source-stat: true
        #当数据库抛出不可恢复的异常时,抛弃该连接
#  ############################data的设置###########################
  data:
    # Mongodb 配置
    mongodb:
      uri: mongodb://120.79.190.44
      port: 27017
      username: admin
      password: 123456
      database: sys_meeting
#
#  ###########################################
#  # 可能会出现 java.net.ConnectException: Connection refused: no further information
#  # 需要修改配置文件redis.conf两个地方，第一将protected-mode的值改为no，第二将bind 120.79.190 注释掉
#  ###########################################
  # redis 配置
  redis:
    # Redis数据库索引（默认为0）
    database: 0
    # Redis服务器地址
    host: 120.79.190.44
    # Redis服务器连接密码（默认为空）
    password: ''
    # Redis服务器连接端口
    port: 6379
    lettuce:
      # 连接超时时间（毫秒）
      shutdown-timeout: 100ms
      # 配置redis的连接池
      pool:
        # 最大连接数据库连接数,设 0 为没有限制
        max-active: 8
        # 最大等待连接中的数量,设 0 为没有限制
        max-idle: 8
        # 最大建立连接等待时间。如果超过此时间将接到异常。设为-1表示无限制。
        max-wait: -1ms
        # 最小等待连接中的数量,设 0 为没有限制
        min-idle: 0
#  # elasticsearch配置
#  elasticsearch:
#    rest:
#      uris: http://192.168.152.152:9200
#      #      username: admin
#      #      password: 123456
#      # 获取连接的超时时间
#      connection-timeout: 1000
#      # 阅读超时
#      read-timeout: 30s


  # 配置rabbitmq
  rabbitmq:
    host: 192.168.152.152
    port: 5672
    username: guest
    password: guest
    # 链接的虚拟主机
    virtualHost: 192.168.152.152:5672
    #多个以逗号分隔，与host功能一样。
    addresses: 192.168.152.152:5672
    # 指定心跳超时，单位秒，0为不指定；默认60s
    requestedHeartbeat: 60
    # 发布返回是否启用
    publisherReturns: true
    # 链接超时。单位ms。0表示无穷大不超时
    connection-timeout: 20
    ### ssl相关
    ssl:
      #是否支持ssl
      enabled:
      keyStore: #指定持有SSL certificate的key store的路径
      keyStoreType: #key store类型 默认PKCS12
      keyStorePassword: #指定访问key store的密码
      trustStore: #指定持有SSL certificates的Trust store
      trustStoreType: #默认JKS
      trustStorePassword: #访问密码
      algorithm: #ssl使用的算法，例如，TLSv1.1
      # 是否开启hostname验证
      verifyHostname:
    ############### cache相关
    cache:
      channel:
        #缓存中保持的channel数量
        size: 10
        #当缓存数量被设置时，从缓存中获取一个channel的超时时间，单位毫秒；如果为0，则总是创建一个新channel
        checkout-timeout: 10000ms
      connection:
        #连接工厂缓存模式：CHANNEL 和 CONNECTION
        mode: channel
        #缓存的连接数，只有是CONNECTION模式时生效
        size: 10
    ############### listener
    listener:
      # 两种类型，SIMPLE，DIRECT
      type: simple
      ## simple类型
      simple:
        # 最小消费者数量
        concurrency: 2
        #最大的消费者数量
        max-concurrency: 10
        # 是否停止容器当容器中的队列不可用
        missing-queues-fatal: true
        ## 与direct相同配置部分
        # 是否自动启动容器
        auto-startup: true
        # 表示消息确认方式，其有三种配置方式，分别是none、manual和auto；默认auto
        acknowledge-mode: auto
        # 指定一个请求能处理多少个消息，如果有事务的话，必须大于等于transaction数量
        prefetch: 10
        # 决定被拒绝的消息是否重新入队；默认是true（与参数acknowledge-mode有关系）
        defaultRequeueRejected: true
        #container events发布频率，单位ms
        idle-event-interval: 10000ms
        ##重试机制
        retry:
          # 有无状态
          stateless: true
          # 是否开启
          enabled: true
          # 最大重试次数,默认3
          max-attempts: 5
          # 重试间隔
          initial-interval: 1000ms
          # 对于上一次重试的乘数
          multiplier: 1
          # 最大重试时间间隔
          maxInterval: 10000ms
      direct:
        # 每个队列消费者数量
        consumers-per-queue: 5
        missingQueuesFatal:
        #...其余配置看上方公共配置
      ## template相关
    template:
      # 是否启用强制信息；默认false
      mandatory: false
      #`receive()`接收方法超时时间
      receive-timeout: 10000ms
      #`sendAndReceive()`超时时间
      reply-timeout: 10000ms
      # 默认的交换机
      # exchange:
      # 默认的路由
      # routingKey:
      # 默认的接收队列
      defaultReceiveQueue:
      ## retry重试相关
      retry:
        #是否开启
        enabled: true
        # 最大重试次数
        max-attempts: 3
        # 失败间隔乘数
        multiplier: 1
        # 重试间隔
        initial-interval: 1000ms
        # 最大间隔
        max-interval: 10000ms
  ############# quartz定时任务,采用数据库方式
  quartz:
    job-store-type: jdbc
    jdbc:
      # NEVER ，ALWAYS会自动初始化数据库
      initialize-schema: embedded
    # 设置自动启动，默认为 true
    auto-startup: true
    # 启动时更新己存在的Job
    overwrite-existing-jobs: true
    properties:
      org:
        quartz:
          scheduler:
            #
            instanceName: MyScheduler
            # ID设置为自动获取 每一个必须不同 （所有调度器实例中是唯一的）
            instanceId: AUTO
          jobStore:
            # 数据保存方式为持久化
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            # StdJDBCDelegate说明支持集群
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            # quartz内部表的前缀
            tablePrefix: QRTZ_
            # 是否加入集群
            isClustered: true
            # 容许的最大作业延长时间
            misfireThreshold: 60000
            # 调度实例失效的检查时间间隔
            clusterCheckinInterval: 10000
          threadPool:
            # ThreadPool实现的类名
            class: org.quartz.simpl.SimpleThreadPool
            # 线程数量
            threadCount: 10
            # 线程优先级
            threadPriority: 5
            # 自创建父线程
            threadsInheritContextClassLoaderOfInitializingThread: true

#
#management:
#  endpoints:
#    web:
#      exposure:
#        include: metrics,httptrace





# minio文件上传
minio:
  minio_url: http://120.79.190.44:9000
  minio_name: admin
  minio_pass: admin123456
  #  bucket name does not follow Amazon S3 standards. For more information refer
  #  Amazon S3：名称唯一、长度至少为个字符，且不得超过63、不能含大写字符或下划线，且必须以小写字母或数字开头
  bucketName: conference

##阿里云oss存储配置
#oss:
#  endpoint: oss-cn-beijing.aliyuncs.com
#  accessKey: ??
#  secretKey: ??
#  bucketName: jeecgos
#  staticDomain: https://static.jeecg.com
#
#
#
# swagger:
#  swagger3.X 访问 http://localhost:8080/swagger-ui/index.html
#  swagger2.X 访问 http://localhost:8080/swagger-ui.html
swagger:
  enable: true

#mybatis plus 设置
mybatis-plus:
  # 扫描resources文件夹下的mapper包里的xml文件
  mapper-locations: classpath*:org/meeting/modules/**/xml/*Mapper.xml
  # 扫描实体类 必须
  type-aliases-package: org.meeting.system.entity
  global-config:
    # 关闭MP3.0自带的banner
    banner: false
    db-config:
      #主键类型 AUTO(0): "数据库ID自增"、 NONE(1): "该类型为未设置主键类型"、INPUT(2): "用户输入ID"、ASSIGN_ID(3): "全局唯一ID (数字类型唯一ID)"、ASSIGN_UUID(4); "全局唯一ID UUID"、ID_WORKER_STR(5): 字符串全局唯一ID (idWorker 的字符串表示)";
      id-type: ID_WORKER_STR
      # 默认数据库表下划线命名
      table-underline: true
  configuration:
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    #log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    # 返回类型为Map,显示null对应的字段
    call-setters-on-nulls: true
    # 延时加载的开关
    lazy-loading-enabled: true
    # 驼峰匹配原则
    map-underscore-to-camel-case: true





